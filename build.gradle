def support_version = '23.0.0'
def autodagger2_version = '1.2-b3-SNAPSHOT'

ext.deps = [
        android_gradle_plugin        : 'com.android.tools.build:gradle:1.5.0',
        apt_gradle_plugin            : 'com.neenbedankt.gradle.plugins:android-apt:1.8',

        appcompat_v7              : "com.android.support:appcompat-v7:$support_version",
        support_v4                : "com.android.support:support-v4:$support_version",
        design                    : "com.android.support:design:$support_version",

        dagger2                      : 'com.google.dagger:dagger:2.1-SNAPSHOT',
        dagger2_compiler             : 'com.google.dagger:dagger-compiler:2.1-SNAPSHOT',
        javax_annotation_jsr250      : 'javax.annotation:jsr250-api:1.0',
        javax_inject                 : 'javax.inject:javax.inject:1',
        mortar                       : 'com.squareup.mortar:mortar:0.19',
        android                      : 'com.google.android:android:4.1.1.4',
        autodagger2               : "com.github.lukaspili.autodagger2:autodagger2:$autodagger2_version",
        autodagger2_compiler      : "com.github.lukaspili.autodagger2:autodagger2-compiler:$autodagger2_version",
        autodagger2_compiler_utils: "com.github.lukaspili.autodagger2:autodagger2-compiler-utils:$autodagger2_version",
        processor_workflow        : 'com.github.lukaspili.processor-workflow:processor-workflow:1.0.3',
        parceler                     : 'org.parceler:parceler:1.0.3',
        parceler_api                 : 'org.parceler:parceler-api:1.0.3',

        butterknife                  : 'com.jakewharton:butterknife:7.0.1',
        timber                       : 'com.jakewharton.timber:timber:2.7.1',

        junit                        : 'junit:junit:4.12',
        mockito                      : 'org.mockito:mockito-core:2.+',
        assertj                      : 'org.assertj:assertj-core:1.7.1'
]
ext.minSdkVersion = 14
ext.targetSdkVersion = 23
ext.compileSdkVersion = 23
ext.buildToolsVersion = '23.0.2'
ext.globalVersion = VERSION_NAME

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

/*repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
}*/


buildscript {
    repositories {
        jcenter()
        maven {
            url "${artifactory_contextUrl}/plugins-release"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:3.0.1"
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }
}

allprojects {
    apply plugin: 'com.jfrog.artifactory-upload'

    buildscript {
        repositories {
            jcenter()
            maven {
                url "${artifactory_contextUrl}/plugins-release"
                credentials {
                    username = "${artifactory_user}"
                    password = "${artifactory_password}"
                }
            }
            mavenCentral()
        }
    }

    repositories {
        jcenter()
        maven { url "${artifactory_contextUrl}/plugins-release" }
        maven { url "${artifactory_contextUrl}/remote-repos" }
        maven { url "${artifactory_contextUrl}/libs-release" }
        maven { url "${artifactory_contextUrl}/libs-snapshot" }
    }

    configurations {
        published
    }

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from 'src/main/java'
    }

    /*artifactoryPublish {
        dependsOn sourceJar
    }*/

    artifacts {
        published sourceJar
    }

    group = GROUP
    version = VERSION_NAME
}

configurations {
    published
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = 'libs-release-local'
            /*if(globalVersion.status.contains("release")){
                repoKey = 'libs-release-local'
            }else{
                repoKey = 'libs-snapshot-local'
            }*/

            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true

        }
    }

    resolve {
        repository {
            repoKey = 'libs-release'
            /*if(globalVersion.status.contains("release")){
                repoKey = 'libs-release'
            }else{
                repoKey = 'libs-snapshot'
            }*/

            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true

        }
    }
}